//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21124049
// Cuda compilation tools, release 8.0, V8.0.44
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_37
.address_size 64

	// .weak	cudaMalloc
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[12] = {71, 80, 85, 32, 105, 115, 32, 79, 75, 33, 10, 0};

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z8Ker_Warmv
.visible .entry _Z8Ker_Warmv(

)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r1, %tid.x;
	setp.ne.s32	%p1, %r1, 0;
	@%p1 bra 	BB6_2;

	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r2, [retval0+0];
	
	//{
	}// Callseq End 0

BB6_2:
	ret;
}

	// .globl	_Z21Ker_Check_CombinationPiiPj
.visible .entry _Z21Ker_Check_CombinationPiiPj(
	.param .u64 _Z21Ker_Check_CombinationPiiPj_param_0,
	.param .u32 _Z21Ker_Check_CombinationPiiPj_param_1,
	.param .u64 _Z21Ker_Check_CombinationPiiPj_param_2
)
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [_Z21Ker_Check_CombinationPiiPj_param_0];
	ld.param.u32 	%r8, [_Z21Ker_Check_CombinationPiiPj_param_1];
	ld.param.u64 	%rd4, [_Z21Ker_Check_CombinationPiiPj_param_2];
	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r17, %r9, %r10, %r11;
	setp.ge.s32	%p1, %r17, %r8;
	@%p1 bra 	BB7_8;

	setp.ne.s32	%p2, %r17, 0;
	@%p2 bra 	BB7_3;

	mov.u32 	%r12, 0;
	st.global.u32 	[%rd2], %r12;

BB7_3:
	mul.wide.s32 	%rd5, %r17, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.u32 	%r2, [%rd6];
	add.s32 	%r3, %r8, -1;
	setp.ge.s32	%p3, %r17, %r3;
	@%p3 bra 	BB7_8;

	add.s32 	%r4, %r2, %r17;
	sub.s32 	%r5, %r2, %r17;

BB7_5:
	add.s32 	%r17, %r17, 1;
	mul.wide.s32 	%rd7, %r17, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.u32 	%r13, [%rd8];
	setp.eq.s32	%p4, %r13, %r2;
	add.s32 	%r14, %r13, %r17;
	setp.eq.s32	%p5, %r14, %r4;
	or.pred  	%p6, %p4, %p5;
	sub.s32 	%r15, %r13, %r17;
	setp.eq.s32	%p7, %r15, %r5;
	or.pred  	%p8, %p6, %p7;
	@!%p8 bra 	BB7_7;
	bra.uni 	BB7_6;

BB7_6:
	atom.global.add.u32 	%r16, [%rd2], 1;

BB7_7:
	setp.lt.s32	%p9, %r17, %r3;
	@%p9 bra 	BB7_5;

BB7_8:
	ret;
}


